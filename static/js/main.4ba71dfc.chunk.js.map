{"version":3,"sources":["types/index.js","helpers/index.js","actionCreators/index.js","components/Card/index.js","images/index.js","images/vader_death.png","components/Card/CardBack.js","components/AttributeBadge/index.js","components/Card/CardFace.js","components/Deck/index.js","components/Dice/index.js","components/Button/index.js","components/Modal/index.js","views/StarView/index.js","views/EndView/index.js","views/Game/index.js","api/index.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["SET_DICE_OUTCOME","SET_CARD_DECKS","SET_SELECTED_CARD_SET","SET_GAME_SCORES","RESET_GAME_PHASE","SET_STAGEG_GAME_RESULT","SET_GAME_STARTED","SET_GAME_ENDED","RESTART_GAME","generateRandomNum","range","Math","floor","random","randomSampleWithoutReplacement","sampleTimes","data","sampledItems","randomNum","length","push","splice","DICE","label","value","setDiceOutcome","diceOutcome","type","selectCard","i","cardDecks","competeWith","dispatch","options","selectedCardOfPlayer","cardsOfPlayer","selectedCardOfComputer","cardsOfComputer","cardSet","lostScores","player","computer","calculatePower","Array","isArray","isNaN","log2","parseInt","playerAttackPower","computerAttackPower","lostScoreOfPlayer","lostScoreOfComputer","calculateLostScores","resetPhase","Card","children","className","onClick","style","height","opacity","vaderDeath","CardBack","src","cardImage","alt","width","AttributeBadge","modifier","CardFace","cardType","card","starships","cargo_capacity","max_atmosphering_speed","renderCardInfo","name","Deck","cards","score","selectedCard","competeAttr","useSelector","state","isPhaseStarted","isStagedResultSaved","maxWidth","fontSize","map","invisible","setVisibility","Dice","diceLabel","handleClickDice","resetDice","setAnimate","useState","animate","setTimeout","disabled","Button","Modal","isOpen","StartView","EndView","winner","Game","useDispatch","isGameStarted","isGameOver","selectedCardSet","scoreOfPlayer","scoreOfComputer","onClickCard","setWinner","useEffect","calculateWinner","a","role","fetch","then","resp","ok","json","results","SWRoleData","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultCardDeck","fill","initialState","reducer","action","newScoreOfPlayer","newScoreOfComputer","defaultPhaseStatus","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ba71dfc.chunk.js","sourcesContent":["export const DISTRIBUTE_CARDS = 'DISTRIBUTE_CARDS';\nexport const SET_DICE_OUTCOME = 'SET_DICE_OUTCOME';\nexport const SET_CARD_DECKS = 'SET_CARD_DECKS';\nexport const SET_SELECTED_CARD_SET = 'SET_SELECTED_CARD_SET';\nexport const SET_GAME_SCORES = 'SET_GAME_SCORES';\nexport const RESET_GAME_PHASE = 'RESET_GAME_PHASE';\nexport const SET_STAGEG_GAME_RESULT = 'SET_STAGEG_GAME_RESULT';\nexport const SET_GAME_STATUS = 'SET_GAME_STATUS';\nexport const SET_GAME_STARTED = 'SET_GAME_STARTED';\nexport const SET_GAME_ENDED = 'SET_GAME_ENDED';\nexport const RESTART_GAME = 'RESTART_GAME';\n","export const generateRandomNum = (range) => {\n  return Math.floor(Math.random() * range);\n};\n\nexport const randomSample = (data) => {\n  const randomNum = generateRandomNum(data.length);\n  return data[randomNum];\n};\n\nexport const randomSampleWithoutReplacement = (sampleTimes, data) => {\n  const sampledItems = [];\n  while (sampleTimes > 0) {\n    const randomNum = generateRandomNum(data.length);\n    sampledItems.push(data.splice(randomNum, 1)[0]);\n    sampleTimes -= 1;\n  }\n  return sampledItems;\n};\n\nexport const autoSelect = (options) => {\n  // options were randomly selected\n  const randomNum = generateRandomNum(options.length);\n  return options[randomNum];\n};\n\nexport const calculateLostScores = (player, computer, competeWith) => {\n  const calculatePower = (value) => {\n    if (Array.isArray(value)) {\n      return value.length;\n    }\n\n    if (isNaN(value)) {\n      return 0;\n    }\n\n    if (value === 0) {\n      return value;\n    }\n    // The range of attribute value is very large so using log2 value\n    const result = Math.floor(Math.log2(parseInt(value)));\n\n    return result;\n  };\n\n  const playerAttackPower = calculatePower(player[competeWith]);\n  const computerAttackPower = calculatePower(computer[competeWith]);\n\n  let lostScoreOfPlayer = 0,\n    lostScoreOfComputer = 0;\n  if (playerAttackPower > computerAttackPower) {\n    lostScoreOfComputer = -computerAttackPower * 3;\n  } else if (playerAttackPower < computerAttackPower) {\n    lostScoreOfPlayer = -playerAttackPower * 3;\n  }\n  return [lostScoreOfPlayer, lostScoreOfComputer];\n};\n","import {\n  SET_DICE_OUTCOME,\n  SET_CARD_DECKS,\n  SET_SELECTED_CARD_SET,\n  SET_GAME_SCORES,\n  RESET_GAME_PHASE,\n  SET_STAGEG_GAME_RESULT,\n  SET_GAME_STARTED,\n  SET_GAME_ENDED,\n  RESTART_GAME,\n} from 'types';\nimport { fetchSWRoleData } from 'api';\nimport {\n  randomSample,\n  randomSampleWithoutReplacement,\n  autoSelect,\n  calculateLostScores,\n} from 'helpers';\n\nconst DICE = [\n  { label: 'people', value: 'starships' },\n  { label: 'starships', value: 'cargo_capacity' },\n  { label: 'vehicles', value: 'max_atmosphering_speed' },\n];\n\nconst NUM_OF_CARDS = 3;\n\nexport const startGame = () => {\n  return { type: SET_GAME_STARTED };\n};\n\nexport const endGame = () => {\n  return { type: SET_GAME_ENDED };\n};\n\nexport const restartGame = () => {\n  return { type: RESTART_GAME };\n};\n\nexport const setDiceOutcome = (diceOutcome) => {\n  return {\n    type: SET_DICE_OUTCOME,\n    diceOutcome,\n  };\n};\n\nexport const setCardDecks = (cardDecks) => {\n  return {\n    type: SET_CARD_DECKS,\n    cardDecks,\n  };\n};\n\nexport const distributeCards = () => {\n  return async (dispatch) => {\n    const diceOutcome = randomSample(DICE);\n    const SWRoleData = await fetchSWRoleData(diceOutcome.label);\n    const cardsOfPlayer = randomSampleWithoutReplacement(\n      NUM_OF_CARDS,\n      SWRoleData\n    );\n    const cardsOfComputer = randomSampleWithoutReplacement(\n      NUM_OF_CARDS,\n      SWRoleData\n    );\n\n    dispatch(setDiceOutcome(diceOutcome));\n    dispatch(setCardDecks({ cardsOfPlayer, cardsOfComputer }));\n  };\n};\n\nexport const setSelectedCardSet = (cardSet) => {\n  return {\n    type: SET_SELECTED_CARD_SET,\n    cardSet,\n  };\n};\n\nexport const setGameScores = (lostScores) => {\n  return {\n    type: SET_GAME_SCORES,\n    ...lostScores,\n  };\n};\n\nexport const setStagedGameResult = () => {\n  return {\n    type: SET_STAGEG_GAME_RESULT,\n  };\n};\n\nexport const resetGamePhase = () => {\n  return {\n    type: RESET_GAME_PHASE,\n  };\n};\n\nexport const selectCard = (i, cardDecks, competeWith) => {\n  return (dispatch) => {\n    // handle select card\n    const selectedCardOfPlayer = cardDecks.cardsOfPlayer[i];\n    const selectedCardOfComputer = autoSelect(cardDecks.cardsOfComputer);\n    dispatch(\n      setSelectedCardSet({ selectedCardOfPlayer, selectedCardOfComputer })\n    );\n\n    // calculate lost scores\n    const [lostScoreOfPlayer, lostScoreOfComputer] = calculateLostScores(\n      selectedCardOfPlayer,\n      selectedCardOfComputer,\n      competeWith\n    );\n    dispatch(setGameScores({ lostScoreOfPlayer, lostScoreOfComputer }));\n\n    // set staged game result\n    dispatch(setStagedGameResult());\n  };\n};\n\nexport const resetPhase = () => resetGamePhase();\n","const Card = ({ selectCard, children, className }) => {\n  return (\n    <button\n      onClick={selectCard}\n      style={{ height: '240px', opacity: '1' }}\n      className={`card shadow rounded-lg border-secondary ${className} p-2`}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Card;\n","import vaderDeath from './vader_death.png';\n\nexport default vaderDeath;\n","export default __webpack_public_path__ + \"static/media/vader_death.eec41162.png\";","import Card from 'components/Card';\nimport cardImage from 'images';\n\nconst CardBack = () => (\n  <Card className=\"d-flex flex-column justify-content-center\">\n    <img src={cardImage} alt=\"card back\" style={{ width: '100%' }} />\n  </Card>\n);\n\nexport default CardBack;\n","import { useDebugValue } from 'react';\n\nconst AttributeBadge = ({ label, value, modifier = 'dark' }) => (\n  <div className={`align-self-center`}>\n    {value === 'n/a' ? (\n      'data lost in galaxy'\n    ) : (\n      <>\n        <h6 className=\"mb-0\">{label}</h6>\n        <span className={`badge badge-${modifier} `}>{value}</span>\n      </>\n    )}\n  </div>\n);\n\nexport default AttributeBadge;\n","import AttributeBadge from 'components/AttributeBadge';\nimport Card from 'components/Card';\nimport cardImage from 'images';\n\nconst CardFace = ({ cardType, card, selectCard }) => {\n  const renderCardInfo = (card) => {\n    switch (cardType) {\n      case 'people': {\n        return (\n          <AttributeBadge\n            label=\"piloted starships \"\n            value={card.starships?.length}\n          />\n        );\n      }\n\n      case 'starships': {\n        return (\n          <AttributeBadge label=\"max speed \" value={card.cargo_capacity} />\n        );\n      }\n\n      case 'vehicles': {\n        return (\n          <AttributeBadge\n            label=\"capacity \"\n            value={card.max_atmosphering_speed}\n          />\n        );\n      }\n    }\n  };\n\n  return (\n    <Card\n      selectCard={selectCard}\n      className=\"d-flex flex-column justify-content-between\"\n    >\n      {renderCardInfo(card)}\n      <h5 className=\"align-self-center\">{card.name}</h5>\n      <img src={cardImage} alt={card.name} style={{ width: '20%' }} />\n    </Card>\n  );\n};\n\nexport default CardFace;\n","import { useSelector } from 'react-redux';\nimport CardBack from 'components/Card/CardBack';\nimport CardFace from 'components/Card/CardFace';\n\nconst Deck = ({ cards, selectCard, label, score, selectedCard }) => {\n  const competeAttr = useSelector((state) => state.diceOutcome.label);\n  const isPhaseStarted = useSelector((state) => state.isPhaseStarted);\n  const isStagedResultSaved = useSelector((state) => state.isStagedResultSaved);\n\n  return (\n    <div className=\"d-flex flex-row-reverse justify-content-center\">\n      <div style={{ maxWidth: '600px' }}>\n        <span className=\"m-2\">{label}</span>\n        <span style={{ fontSize: '40px' }}>{score}</span>\n        <div className=\"card-deck\">\n          {cards.map((card, i) => {\n            const setVisibility = () => {\n              let invisible;\n              if (isPhaseStarted) {\n                invisible = label === 'COMPUTER';\n                if (isStagedResultSaved) {\n                  invisible = card.name !== selectedCard.name;\n                }\n              } else {\n                invisible = true;\n              }\n              return invisible;\n            };\n            return setVisibility() ? (\n              <CardBack key={i} />\n            ) : (\n              <CardFace\n                key={i}\n                selectCard={() => selectCard(i)}\n                cardType={competeAttr}\n                card={card}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Deck;\n","import { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './Dice.css';\n\nconst Dice = ({ diceLabel, handleClickDice, isPhaseStarted }) => {\n  const resetDice = () => {\n    handleClickDice();\n    setAnimate(false);\n  };\n  const [animate, setAnimate] = useState(false);\n  const tossDice = () => {\n    setAnimate(true);\n    setTimeout(resetDice, 1000);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      onClick={tossDice}\n      disabled={isPhaseStarted}\n      style={{ width: '100px', height: '100px' }}\n      className={`rounded-lg dice ${animate && 'spin'}`}\n    >\n      {isPhaseStarted ? `${diceLabel}` : 'Toss Dice'}\n    </button>\n  );\n};\n\nexport default Dice;\n","const Button = ({ onClick, label }) => (\n  <button className=\"btn btn-dark btn-large\" type=\"button\" onClick={onClick}>\n    {label}\n  </button>\n);\n\nexport default Button;\n","import './Modal.css';\n\nconst Modal = ({ isOpen, children }) => (\n  <div className={`Modal ${isOpen ? 'Modal--open' : ''}`}>{children}</div>\n);\n\nexport default Modal;\n","import Button from 'components/Button';\nimport Modal from 'components/Modal';\n\nconst StartView = ({ onClick, isOpen }) => (\n  <Modal isOpen={isOpen}>\n    <div style={{ width: '50%' }} className=\"mx-auto\">\n      <p>\n        the war between bright and dark is about to begin.\n        <br /> the start of the is determined by a dice. <br />\n        the end is determined by the card you play. <br />\n        more powerful your card is, <br />\n        more power you will lose.\n      </p>\n      <Button label=\"START WAR\" onClick={onClick} />\n    </div>\n  </Modal>\n);\n\nexport default StartView;\n","import Button from 'components/Button';\nimport Modal from 'components/Modal';\n\nconst EndView = ({ onClick, winner, isOpen }) => (\n  <Modal isOpen={isOpen}>\n    <div style={{ width: '50%' }} className=\"mx-auto\">\n      <h4>{winner} is the winner</h4>\n      <p>the peace in galaxy will continue for 1000yrs, unless you...</p>\n      <Button label=\"END PEACE\" onClick={onClick} />\n    </div>\n  </Modal>\n);\n\nexport default EndView;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  distributeCards,\n  selectCard,\n  resetPhase,\n  startGame,\n  endGame,\n  restartGame,\n} from 'actionCreators';\n\nimport Deck from 'components/Deck';\nimport Dice from 'components/Dice';\nimport Button from 'components/Button';\nimport StartView from 'views/StarView';\nimport EndView from 'views/EndView';\n\nconst Game = () => {\n  const dispatch = useDispatch();\n\n  const isGameStarted = useSelector((state) => state.isGameStarted);\n  const isGameOver = useSelector((state) => state.isGameOver);\n  const isPhaseStarted = useSelector((state) => state.isPhaseStarted);\n  const isStagedResultSaved = useSelector((state) => state.isStagedResultSaved);\n  const diceOutcome = useSelector((state) => state.diceOutcome);\n  const cardDecks = useSelector((state) => state.cardDecks);\n  const selectedCardSet = useSelector((state) => state.selectedCardSet);\n  const scoreOfPlayer = useSelector((state) => state.scoreOfPlayer);\n  const scoreOfComputer = useSelector((state) => state.scoreOfComputer);\n\n  const onClickCard = (cardDecks, competeWith) => (i) =>\n    dispatch(selectCard(i, cardDecks, competeWith));\n\n  const calculateWinner = (scoreOfPlayer, scoreOfComputer) => {\n    let winner = '';\n    if (scoreOfPlayer <= 0 || scoreOfComputer <= 0) {\n      winner = scoreOfPlayer > scoreOfComputer ? 'Player' : 'Computer';\n      return winner;\n    }\n    return winner;\n  };\n\n  const [winner, setWinner] = useState('');\n\n  useEffect(() => {\n    const winner = calculateWinner(scoreOfPlayer, scoreOfComputer);\n\n    if (winner !== '') {\n      dispatch(endGame());\n      setWinner(winner);\n    }\n  });\n\n  return (\n    <div>\n      <StartView\n        isOpen={!isGameStarted}\n        onClick={() => {\n          dispatch(startGame());\n        }}\n      />\n      <EndView\n        isOpen={isGameOver}\n        onClick={() => dispatch(restartGame())}\n        winner={winner}\n      />\n\n      <div\n        className=\"d-flex flex-column text-center m-4\"\n        style={{ height: '90vh' }}\n      >\n        <div className=\"flex-grow-1\">\n          <Deck\n            label=\"COMPUTER\"\n            score={scoreOfComputer}\n            cards={cardDecks.cardsOfComputer}\n            selectCard={onClickCard(cardDecks, diceOutcome.value)}\n            selectedCard={selectedCardSet.selectedCardOfComputer}\n          />\n        </div>\n\n        <div className=\"flex-grow-1\">\n          {!isStagedResultSaved ? (\n            <Dice\n              diceLabel={diceOutcome.label}\n              isPhaseStarted={isPhaseStarted}\n              handleClickDice={() => dispatch(distributeCards())}\n            />\n          ) : (\n            <Button\n              label=\"KEEP FIGHTING\"\n              onClick={() => dispatch(resetPhase())}\n            />\n          )}\n        </div>\n\n        <div className=\"flex-grow-1\">\n          <Deck\n            label=\"PLAYER\"\n            score={scoreOfPlayer}\n            cards={cardDecks.cardsOfPlayer}\n            selectCard={onClickCard(cardDecks, diceOutcome.value)}\n            selectedCard={selectedCardSet.selectedCardOfPlayer}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","const BASE_URL = 'https://swapi.dev/api/';\n\nexport const fetchSWRoleData = (role) => {\n  return fetch(`${BASE_URL}${role}/`)\n    .then((resp) => {\n      if (!resp.ok) {\n        throw 'something wrong';\n      }\n      return resp.json();\n    })\n    .then((data) => data.results);\n};\n","import Game from 'views/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  SET_DICE_OUTCOME,\n  SET_CARD_DECKS,\n  SET_SELECTED_CARD_SET,\n  SET_GAME_SCORES,\n  RESET_GAME_PHASE,\n  SET_STAGEG_GAME_RESULT,\n  SET_GAME_STARTED,\n  SET_GAME_ENDED,\n  RESTART_GAME,\n} from 'types';\n\nconst defaultCardDeck = [0, 0, 0].fill({});\nconst initialState = {\n  isGameStarted: false,\n  isPhaseStarted: false,\n  diceOutcome: { label: '', value: '' },\n  cardDecks: {\n    cardsOfPlayer: defaultCardDeck,\n    cardsOfComputer: defaultCardDeck,\n  },\n  selectedCardSet: {\n    selectedCardOfPlayer: {},\n    selectedCardOfComputer: {},\n  },\n  scoreOfPlayer: 100,\n  scoreOfComputer: 100,\n  isStagedResultSaved: false,\n  isGameOver: false,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_GAME_STARTED: {\n      return { ...state, isGameStarted: true };\n    }\n\n    case SET_GAME_ENDED: {\n      return { ...state, isGameOver: true };\n    }\n\n    case SET_DICE_OUTCOME: {\n      return {\n        ...state,\n        diceOutcome: action.diceOutcome,\n        isPhaseStarted: true,\n      };\n    }\n\n    case RESTART_GAME: {\n      return { ...state, ...initialState };\n    }\n\n    case SET_CARD_DECKS: {\n      return { ...state, cardDecks: action.cardDecks };\n    }\n\n    case SET_SELECTED_CARD_SET: {\n      return { ...state, selectedCardSet: action.cardSet };\n    }\n\n    case SET_GAME_SCORES: {\n      const { scoreOfPlayer, scoreOfComputer } = { ...state };\n      const newScoreOfPlayer = scoreOfPlayer + action.lostScoreOfPlayer;\n      const newScoreOfComputer = scoreOfComputer + action.lostScoreOfComputer;\n      return {\n        ...state,\n        scoreOfPlayer: newScoreOfPlayer,\n        scoreOfComputer: newScoreOfComputer,\n      };\n    }\n\n    case SET_STAGEG_GAME_RESULT: {\n      return {\n        ...state,\n        isStagedResultSaved: true,\n      };\n    }\n\n    case RESET_GAME_PHASE: {\n      const defaultPhaseStatus = {\n        isPhaseStarted: false,\n        diceOutcome: '',\n        cardDecks: {\n          cardsOfPlayer: defaultCardDeck,\n          cardsOfComputer: defaultCardDeck,\n        },\n        isStagedResultSaved: false,\n      };\n      return { ...state, ...defaultPhaseStatus };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from 'reducers';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}